<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Cpp语言入门</title>
      <link href="/2023/05/08/Cpp%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
      <url>/2023/05/08/Cpp%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>✨：信息学一本通入门篇题目解析💭<br>💟：幸愉编程 <br>💜: 学习如逆水行舟，不进则退 💜💜<br>🌸: 如有错误或不足之处，希望可以指正，非常感谢😉</p></blockquote><h1 id="T1000-A-B"><a href="#T1000-A-B" class="headerlink" title="T1000 A+B"></a>T1000 A+B</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>求两个整数的和。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>一行，两个用空格隔开的整数。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>两个整数的和。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 3</span><br></pre></td></tr></table></figure><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="涉及知识点"><a href="#涉及知识点" class="headerlink" title="涉及知识点"></a>涉及知识点</h2><p><strong>cin: 输入语句，用于输入两个整数 a 和 b。<br>cout: 输出语句，用于输出显示计算结果。</strong></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><strong>定义两个变量 a 和 b，使用 cin 语句输入两个变量，使用 cout 语句将两个整数的和正常输出。</strong></p><h2 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h2><p><strong>若输入的 a 和 b 都是 int 类型中的最大值，那么 a + b 计算过后会超过 int 表示的最大范围，int 数据类型的范围是 [-2147483648, 2147483647]，这个时候需要使用更大的数据类型来表示，即采用 long long，这种易错点在电子学会考级一级里面考察过，平时练习需要注意！</strong></p><h2 id="Cpp代码"><a href="#Cpp代码" class="headerlink" title="Cpp代码"></a>Cpp代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">cout&lt;&lt;a+b;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="Python-3-代码"><a href="#Python-3-代码" class="headerlink" title="Python 3 代码"></a>Python 3 代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a , b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br></pre></td></tr></table></figure><h1 id="T1001-Hello-World"><a href="#T1001-Hello-World" class="headerlink" title="T1001 Hello,World!"></a>T1001 Hello,World!</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>输出一个 Hello,World!</p><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><p>( 无 )</p><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><p>Hello,World!</p><h2 id="涉及知识点-1"><a href="#涉及知识点-1" class="headerlink" title="涉及知识点"></a>涉及知识点</h2><p><strong>C++ 基础程序框架 👇</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>cout 语句输出一串字符，即 cout&lt;&lt;”输出的内容”; 双引号会将字符串的内容原样输出。</strong></p><h2 id="Cpp-代码"><a href="#Cpp-代码" class="headerlink" title="Cpp 代码"></a>Cpp 代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Python-3-代码-1"><a href="#Python-3-代码-1" class="headerlink" title="Python 3 代码"></a>Python 3 代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello,World!&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="T1002-输出第二个整数"><a href="#T1002-输出第二个整数" class="headerlink" title="T1002 输出第二个整数"></a>T1002 输出第二个整数</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入三个整数，整数之间由一个空格分隔，整数是 32 位有符号整数。把第二个输入的整数输出。</p><h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><p>只有一行，共三个整数，整数之间由一个空格分隔。整数是 32 位有符号整数。</p><h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><p>只有一行，一个整数，即输入的第二个整数。</p><h2 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span> <span class="number">456</span> <span class="number">789</span></span><br></pre></td></tr></table></figure><h2 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">456</span></span><br></pre></td></tr></table></figure><h2 id="涉及知识点-2"><a href="#涉及知识点-2" class="headerlink" title="涉及知识点"></a>涉及知识点</h2><strong>整数 32 位有符号整数使用数据类型 int变量的定义：数据类型 + 空格 + 变量名;变量名的命名规则：① 只能由数字、字符、下划线组成。② 开头不能是数字。③ 不可以是关键字。④ 字符不能是标点符号和运算符。⑤ 不可以包含空格。</strong><h2 id="Cpp-代码-1"><a href="#Cpp-代码-1" class="headerlink" title="Cpp 代码"></a>Cpp 代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    cout&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Python-3-代码-2"><a href="#Python-3-代码-2" class="headerlink" title="Python 3 代码"></a>Python 3 代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a , b, c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><h1 id="对齐输出"><a href="#对齐输出" class="headerlink" title="对齐输出"></a>对齐输出</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>读入三个整数，按每个整数占 8 个字符的宽度，右对齐输出它们，按照格式要求依次输出三个整数，之间以一个空格分开。</p><h2 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h2><p>只有一行，包含三个整数，整数之间以一个空格分开。</p><h2 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h2><p>只有一行，按照格式要求依次输出三个整数，之间以一个空格分开。</p><h2 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123456789 0 -1</span><br></pre></td></tr></table></figure><h2 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123456789        0       -1</span><br></pre></td></tr></table></figure><h2 id="涉及知识点-3"><a href="#涉及知识点-3" class="headerlink" title="涉及知识点"></a>涉及知识点</h2><p>对齐，这里使用 C 语言的格式化输出对齐比较方便，且效率比 C++ 中的 cin 和 cout 的效率高<br>整数的格式化对其输出:<br>左对齐：printf(“%-md”,变量名); 左对齐输出 m 位，不足 m 位，右边补空格<br>右对其：printf(“%md”, 变量名); 右对齐输出 m 位，不足 m 位，左边补空格</p><h2 id="易错点-1"><a href="#易错点-1" class="headerlink" title="易错点"></a>易错点</h2><p>输出的三个数，相邻两个数之间有一个空格，很多同学输出的时候少输出了一个空格</p><h2 id="Cpp-代码-2"><a href="#Cpp-代码-2" class="headerlink" title="Cpp 代码"></a>Cpp 代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%8d %8d %8d&quot;</span>,a,b,c); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Python-3-代码-3"><a href="#Python-3-代码-3" class="headerlink" title="Python 3 代码"></a>Python 3 代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%8s&quot;</span> %a, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%8s&quot;</span> %b, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%8s&quot;</span> %c)</span><br></pre></td></tr></table></figure><h1 id="T1004-字符三角形"><a href="#T1004-字符三角形" class="headerlink" title="T1004 字符三角形"></a>T1004 字符三角形</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个字符，用它构造一个底边长 5 个字符，高 3 个字符的等腰字符三角形。</p><h2 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h2><p>输入只有一行，包含一个字符。</p><h2 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h2><p>该字符构成的等腰三角形，底边长 5 个字符，高 3 个字符。</p><h2 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*</span><br></pre></td></tr></table></figure><h2 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><h2 id="涉及知识点-4"><a href="#涉及知识点-4" class="headerlink" title="涉及知识点"></a>涉及知识点</h2><p><strong>定义一个字符变量使用字符数据类型的关键字 char 来定义<br>使用输入语句 cin 来读取，然后使用 cout 或者 printf 输出即可</strong></p><h2 id="易错点-2"><a href="#易错点-2" class="headerlink" title="易错点"></a>易错点</h2><p><strong>字符 ‘5’ 和 数字 5 是不同的，一些比较坑的题目字符给的数字字符，很多初学者会误认为是整数造成数据类型使用错误而答案错误。区别数字和数字字符的不同是比较 ASCII 码值。</strong></p><h2 id="Cpp-代码-3"><a href="#Cpp-代码-3" class="headerlink" title="Cpp 代码"></a>Cpp 代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">cin&gt;&gt;ch;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;ch&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ch&lt;&lt;ch&lt;&lt;ch&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;ch&lt;&lt;ch&lt;&lt;ch&lt;&lt;ch&lt;&lt;ch&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Python-3-代码-4"><a href="#Python-3-代码-4" class="headerlink" title="Python 3 代码"></a>Python 3 代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = input()</span><br><span class="line">a1 = &quot;  &quot; + a </span><br><span class="line">a2 = &quot; &quot; + a + a + a</span><br><span class="line">a3 = a + a + a + a + a</span><br><span class="line">print(a1[::1])</span><br><span class="line">print(a2[::1])</span><br><span class="line">print(a3[::1])</span><br></pre></td></tr></table></figure><h1 id="T1005-地球人口承载力估计"><a href="#T1005-地球人口承载力估计" class="headerlink" title="T1005 地球人口承载力估计"></a>T1005 地球人口承载力估计</h1><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>假设地球上的新生资源按恒定速度增长。照此测算，地球上现有资源加上新生资源可供 x 亿人生活 a 年，或供 y 亿人生活 b 年。<br>为了能够实现可持续发展，避免资源枯竭，地球最多能够养活多少亿人？</p><h2 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h2><p>一行，包括四个正整数 x，a，y，b，两个整数之间用单个空格隔开。x&gt;y，a&lt;b，ax​ &lt; by​，各整数均不大于 10000。</p><h2 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h2><p>一个实数 z，表示地球最多养活 z 亿人，舍入到小数点后两位。</p><h2 id="输入样例-4"><a href="#输入样例-4" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">110 90 90 210</span><br></pre></td></tr></table></figure><h2 id="输出样例-4"><a href="#输出样例-4" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">75.00</span><br></pre></td></tr></table></figure><h2 id="涉及知识点-5"><a href="#涉及知识点-5" class="headerlink" title="涉及知识点"></a>涉及知识点</h2><p><strong>浮点数的输出，C++ 中保留两位小数输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cout&lt;&lt;fixed&lt;&lt;setprecision(2)&lt;&lt;浮点数变量名;</span><br></pre></td></tr></table></figure><p>C 语言中保留两位小数的格式化输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">printf(&quot;%.2f&quot;, 浮点类型变量名);</span><br></pre></td></tr></table></figure><p>数据类型使用 double 进行运算，读入可以是整数或者使用实数 double 数据类型，因为 整数&#x2F;整数 执行的是整数除法，无法保留小数位，造成计算的数据错误。</strong></p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p><strong>x 亿人生活 a 年需要的资源是 a<em>x，y 亿人生活 b 年需要的资源是 y</em>b，由于x &lt; y 且 a &lt; b，那么 y<em>b &gt; x</em>a 这部分多的资源就是地球的可再生能源，b - a 表示可再生能源的年份，资源差&#x2F;年份差 就是地球最多能养活的人口数。</strong></p><h2 id="易错点-3"><a href="#易错点-3" class="headerlink" title="易错点"></a>易错点</h2><p>AC代码中的错误代码如下:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x,y,a,b;</span><br><span class="line"><span class="type">double</span> z;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;a&gt;&gt;y&gt;&gt;b;</span><br><span class="line">z=(y*b-x*a)/(b-a);  <span class="comment">//整数的结果赋值给浮点数</span></span><br><span class="line">cout&lt;&lt;<span class="built_in">setiosflags</span>(ios::fixed)&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">2</span>);</span><br><span class="line">cout&lt;&lt;z&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cpp-代码-4"><a href="#Cpp-代码-4" class="headerlink" title="Cpp 代码"></a>Cpp 代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x,a,y,d,z;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;a&gt;&gt;y&gt;&gt;d;</span><br><span class="line">    cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;(<span class="type">double</span>)(d*y-a*x)/(d-a)&lt;&lt;endl;       </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Python-3-代码-5"><a href="#Python-3-代码-5" class="headerlink" title="Python 3 代码"></a>Python 3 代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, a, y, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line">ans = (y*b - a*x)/(b - a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.2f&quot;</span>%ans)</span><br></pre></td></tr></table></figure><p><img src="/./img/wxss.jpg" alt="微信公众号:幸愉聊信奥"></p>]]></content>
      
      
      <categories>
          
          <category> 信息学一本通入门篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 顺序结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022CSP-J第二轮认证真题解析</title>
      <link href="/2023/01/02/2022CSP-J%E7%AC%AC%E4%BA%8C%E8%BD%AE%E8%AE%A4%E8%AF%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/01/02/2022CSP-J%E7%AC%AC%E4%BA%8C%E8%BD%AE%E8%AE%A4%E8%AF%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ba9f1a56744b25a22daf2ac56f5a90c7e5ef164d80fcfadb0462dfeb8bac466a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入正确密码阅读文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> NOIP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NOIP普及组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp语法基础总结</title>
      <link href="/2022/11/29/Cpp%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/11/29/Cpp%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p><strong>打开编译软件，出现的第一个程序肯定是Hello Word!</strong> </p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  <span class="comment">//C++的命名空间，可以让在不同命名空间中的函数名或变量名相同</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello world!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h2><blockquote><p><font color="red"><strong>变量的定义:</strong></font><strong>变量必须先定义，才可以使用。不能重名。</strong></p></blockquote><p><font color="Bluee"><strong>变量定义的方式:</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> c=a,d=<span class="number">10</span>/<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/C++1.jpg" alt="在这里插入图片描述"></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p><font color="Bluee"><strong>整数的输入输出：</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    cout&lt;&lt;a+b&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>字符串的输入输出：</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    cin&gt;&gt;str;</span><br><span class="line">    cout&lt;&lt;str;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>输入输出多个不同类型的变量：</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    string str;</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    cin&gt;&gt;b&gt;&gt;str;</span><br><span class="line">    cout&lt;&lt;str&lt;&lt;<span class="string">&quot; !!! &quot;</span>&lt;&lt;a+b&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p><font color="Bluee"><strong>整数的加减乘除四则运算：</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">6</span>+<span class="number">3</span>*<span class="number">4</span>/<span class="number">2</span><span class="number">-2</span>;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> b=a*<span class="number">10</span>+<span class="number">5</span>/<span class="number">2</span>;</span><br><span class="line">    cout&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="number">23</span>*<span class="number">56</span><span class="number">-78</span>/<span class="number">3</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/C++2.jpg" alt="在这里插入图片描述"><br><font color="Bluee"><strong>浮点数（小数）的运算：</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> x=<span class="number">1.5</span>,y=<span class="number">3.2</span>;</span><br><span class="line">    cout&lt;&lt;x*y&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;x+y&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;x-y&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;x/y&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>整型变量的自增、自减：</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> b=a++;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> c=++a;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>变量的类型转换：</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> x=<span class="number">123.12</span>;</span><br><span class="line">    <span class="type">int</span> y=(<span class="type">int</span>)x;</span><br><span class="line">    cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Printf语句与判断结构"><a href="#Printf语句与判断结构" class="headerlink" title="Printf语句与判断结构"></a>Printf语句与判断结构</h1><h2 id="printf输出格式"><a href="#printf输出格式" class="headerlink" title="printf输出格式"></a>printf输出格式</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//注意：使用printf 时最好添加头文件 #include &lt;cstdio&gt;。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Int、float、double、char等类型的输出格式：<br>(1)Int：%d<br>(2)Float: %f, 默认保留6位小数<br>(3)Double: %lf， 默认保留6位小数<br>(4)Char: %c, 回车也是一个字符，用’\n’表示<br>(5)Float, double等输出保留若干位小数时用：%.4f, %3lf</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">3</span>;</span><br><span class="line">    <span class="type">float</span> b=<span class="number">3.12345678</span>;</span><br><span class="line">    <span class="type">double</span> c=<span class="number">3.12345678</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%5d\n&quot;</span>,a);</span><br><span class="line"><span class="comment">// %8.3f, 表示这个浮点数的最小宽度为8，保留3位小数，当宽度不足时在前面补空格。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%8.3f\n&quot;</span>,b);</span><br><span class="line"><span class="comment">// %-8.3f，表示最小宽度为8，保留3位小数，当宽度不足时在后面补上空格</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%-8.3f\n&quot;</span>,b);</span><br><span class="line"><span class="comment">//%08.3f, 表示最小宽度为8，保留3位小数，当宽度不足时在前面补上0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%08.3f\n&quot;</span>,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%7.3f\n&quot;</span>,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><blockquote><p>1.基本if-else语句，当条件成立时，执行某些语句；否则执行另一些语句。<br>2.Else 语句可以省略。<br>3.当只有一条语句时，大括号可以省略。<br><font color="Bluee"><strong>常用比较运算符</strong></font><br>(1) 大于 &gt;<br>(2) 小于 &lt;<br>(3) 大于等于 &gt;&#x3D;<br>(4) 小于等于 &lt;&#x3D;<br>(5) 等于 &#x3D;&#x3D;<br>(6) 不等于 !&#x3D;</p></blockquote><p><font color="red"><strong>判断闰年，闰年输出Yes，反之输出No</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line">    cin&gt;&gt;year;</span><br><span class="line">    <span class="keyword">if</span>(year%<span class="number">400</span>==<span class="number">0</span> || (year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>))</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><blockquote><p>可以简单理解为循环版的if语句。If语句是判断一次，如果条件成立，则执行后面的语句；while是每次判断，如果成立，则执行循环体中的语句，否则停止。</p></blockquote><p><font color="Bluee"><strong>求斐波那契数列的第n项。f(1)&#x3D;1, f(2)&#x3D;1, f(3)&#x3D;2, f(n)&#x3D;f(n-1) + f(n-2)。</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">1</span>,i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> c=a+b;</span><br><span class="line">        a=b;</span><br><span class="line">        b=c;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>死循环：循环永久执行，无法结束。我们要避免写出死循环。</p></blockquote><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h2><blockquote><p>do while循环不常用。<br>do while语句与while语句非常相似。唯一的区别是，do while语句限制性循环体后检查条件。不管条件的值如何，我们都要至少执行一次循环。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;x!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> y=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;y!&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">while</span>(y&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><blockquote><p>基本思想：把控制循环次数的变量从循环体中剥离。<br>for (init-statement : condition: expression)<br>{<br>    statement<br>}<br>init-statement可以是声明语句、表达式、空语句，一般用来初始化循环变量；<br>condition 是条件表达式，和while中的条件表达式作用一样；可以为空，空语句表示true<br>expression 一般负责修改循环变量，可以为空<br>init-statement可以定义多个变量，expression也可以修改多个变量。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h2><blockquote><p>break可以提前从循环中退出，一般与if语句搭配。</p></blockquote><p><font color="Bluee"><strong>判断一个大于1的数是否是质数。</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">bool</span> is_prime=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            is_prime=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(is_prime) cout&lt;&lt;<span class="string">&quot;yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;no&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>continue可以直接跳到当前循环体的结尾。作用与if语句类似。</p></blockquote><p><font color="Bluee"><strong>求1~100中所有偶数的和。</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">        sum+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>打印1~100中的所有质数</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> is_prime=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%j==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                is_prime=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(is_prime) cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>输入一个n，打印n阶菱形。n是奇数。</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> cx=n/<span class="number">2</span>,cy=n/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(i-cx)+<span class="built_in">abs</span>(j-cy)&lt;=n/<span class="number">2</span>)</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;*&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><blockquote><p>数组的定义方式和变量类似。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>],b[<span class="number">20</span>];</span><br><span class="line">    <span class="type">float</span> f[<span class="number">33</span>];</span><br><span class="line">    <span class="type">double</span> d[<span class="number">123</span>];</span><br><span class="line">    <span class="type">char</span> c[<span class="number">21</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数组的初始化，在main函数内部，未初始化的数组中的元素是随机的。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;  <span class="comment">//含有3个元素的数组，元素分别是0,1,2</span></span><br><span class="line">    <span class="type">int</span> b[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;  <span class="comment">//维度是3的数组</span></span><br><span class="line">    <span class="type">int</span> c[<span class="number">5</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;  <span class="comment">//等价于 c[]=&#123;0,1,2,0,0&#125;</span></span><br><span class="line">    <span class="type">char</span> d[<span class="number">3</span>]=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;  <span class="comment">//字符数组的初始化</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>访问数组元素，通过下标访问数组。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;  <span class="comment">//数组下标从0开始</span></span><br><span class="line">    cout&lt;&lt;a[<span class="number">0</span>]&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;a[<span class="number">1</span>]&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;a[<span class="number">2</span>]&lt;&lt;endl;</span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">5</span>;</span><br><span class="line">    cout&lt;&lt;a[<span class="number">0</span>]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>使用数组实现求斐波那契数列的第N项。</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> f[<span class="number">100</span>];</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">0</span>,f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++) f[i]=f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>];</span><br><span class="line">    cout&lt;&lt;f[n]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>输入一个n，再输入n个整数。将这个数组顺时针旋转k(k &lt;&#x3D; n)次，最后将结果输出。</strong></p></font><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">reverse</span>(a,a+k);</span><br><span class="line">    <span class="built_in">reverse</span>(a+k,a+n);</span><br><span class="line">    <span class="built_in">reverse</span>(a,a+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>计算2的N次方。N &lt;&#x3D; 10000</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10000</span>],size=<span class="number">1</span>,n;</span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            t+=a[i]*<span class="number">2</span>;</span><br><span class="line">            a[i]=t%<span class="number">10</span>;</span><br><span class="line">            t/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t) a[size++]=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=size<span class="number">-1</span>;~i;i--) cout&lt;&lt;a[i];</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>多维数组:多维数组就是数组的数组。<br>Int a[3][4];   &#x2F;&#x2F; 大小为3的数组，每个元素是含有4个整数的数组。<br>Int arr[10][20][30] &#x3D; {0};  &#x2F;***  将所有元素初始化为0<br>,大小为10的数组，它的每个元素是含有4个整数的数组, 这些数组的元素是含有30个整数的数组   ***&#x2F;</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">3</span>][<span class="number">4</span>]=&#123;   <span class="comment">//三个元素，每个元素是大小为4的数组</span></span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,   <span class="comment">//第一行的初始值</span></span><br><span class="line">            &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;,   <span class="comment">//第二行的初始值</span></span><br><span class="line">            &#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>&#125;  <span class="comment">//第三行的初始值</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>输入一个n行m列的矩阵，从左上角开始将其按回字形的顺序顺时针打印出来。</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++) cin&gt;&gt;arr[i][j];</span><br><span class="line"></span><br><span class="line">   <span class="type">bool</span> st[<span class="number">50</span>][<span class="number">50</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line">   <span class="type">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">   <span class="type">int</span> d=<span class="number">1</span>,x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n*m;i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="type">int</span> a=x+dx[d],b=y+dy[d];</span><br><span class="line">       <span class="keyword">if</span>(a&lt;<span class="number">0</span> || a&gt;=n || b&lt;<span class="number">0</span> || b&gt;=m || st[a][b])</span><br><span class="line">       &#123;</span><br><span class="line">           d=(d+<span class="number">1</span>)%<span class="number">4</span>;</span><br><span class="line">           a=x+dx[d],b=y+dy[d];</span><br><span class="line">       &#125;</span><br><span class="line">       cout&lt;&lt;arr[x][y]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="comment">//   cout&lt;&lt;&quot;x = &quot;&lt;&lt;x&lt;&lt;&#x27; &#x27;&lt;&lt;&quot;y = &quot;&lt;&lt;y&lt;&lt;endl;</span></span><br><span class="line">       st[x][y]=<span class="literal">true</span>;</span><br><span class="line">       x=a,y=b;</span><br><span class="line">   &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符与整数的联系——ASCII码"><a href="#字符与整数的联系——ASCII码" class="headerlink" title="字符与整数的联系——ASCII码"></a>字符与整数的联系——ASCII码</h2><blockquote><p>每个常用字符都对应一个-128~127的数字，二者之间可以相互转化</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    cout&lt;&lt;(<span class="type">int</span>)c&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">66</span>;</span><br><span class="line">    cout&lt;&lt;(<span class="type">char</span>)a&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>常用ASCII值：’A’-‘Z’ 是65~90，’a’-‘z’是97-122，’0’-‘9’是48-57。字符可以参与运算，运算时会将其当做整数</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="string">&#x27;B&#x27;</span>-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="string">&#x27;A&#x27;</span>*<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    <span class="type">char</span> c=<span class="string">&#x27;A&#x27;</span>+<span class="number">2</span>;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>输入一行字符，统计出其中数字字符的个数，以及字母字符的个数。</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">0</span>,c=<span class="number">0</span>;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;9&#x27;</span>) n++;</span><br><span class="line">        <span class="keyword">if</span>((s[i]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;z&#x27;</span>)||(s[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;Z&#x27;</span>)) c++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;n&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h2><blockquote><p>字符串就是字符数组加上结束符’\0’。可以使用字符串来初始化字符数组，但此时要注意，每个字符串结尾会暗含一个’\0’字符，因此字符数组的长度至少要比字符串的长度多1！</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> a1[]=&#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;+&#x27;</span>&#125;;   <span class="comment">//列表初始化，没有空字符</span></span><br><span class="line">    <span class="type">char</span> a2[]=&#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;  <span class="comment">//列表初始化，含有显示的空字符 </span></span><br><span class="line">    <span class="type">char</span> a3[]=<span class="string">&quot;C++&quot;</span>;  <span class="comment">//自动添加表示字符串结尾的空字符</span></span><br><span class="line">    <span class="type">char</span> a4[<span class="number">6</span>]=<span class="string">&quot;Daniel&quot;</span>;  <span class="comment">//错误:没有空间可存放空字符!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>字符数组的输入输出</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">    cin&gt;&gt;str;   <span class="comment">//输入字符串时，遇到空格或者回车就会停止!</span></span><br><span class="line">    cout&lt;&lt;str&lt;&lt;endl;  <span class="comment">//输出字符串时，遇到空格或者回车不会停止</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>读入一行字符串，包括空格</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">gets</span>(str);</span><br><span class="line">    cout&lt;&lt;str&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符数组的常用操作"><a href="#字符数组的常用操作" class="headerlink" title="字符数组的常用操作"></a>字符数组的常用操作</h2><blockquote><p>下面几个函数需要引入头文件: #include &lt;string.h&gt;<br>(1)strlen(str):求字符串的长度<br>(2)strcmp(a, b):比较两个字符串的大小，a &lt; b 返回-1，a &#x3D;&#x3D; b 返回0，a &gt; b返回1。这里的比较方式是字典序！<br>(3)strcpy(a, b):将字符串b复制给从a开始的字符数组。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>]=<span class="string">&quot;hello world!&quot;</span>,b[<span class="number">100</span>];</span><br><span class="line">    cout&lt;&lt;<span class="built_in">strlen</span>(a)&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">strcpy</span>(b,a);</span><br><span class="line">    cout&lt;&lt;<span class="built_in">strcmp</span>(a,b)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>遍历字符数组中的字符</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>]=<span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(a);i++) cout&lt;&lt;a[i]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准库类型-string"><a href="#标准库类型-string" class="headerlink" title="标准库类型 string"></a>标准库类型 string</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可变长的字符序列，比字符数组更加好用。需要引头文</span><br><span class="line">件：#include &lt;string&gt;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>定义和初始化</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1;   <span class="comment">//默认初始化，s1是一个空字符串</span></span><br><span class="line">    string s2=s1;  <span class="comment">//s2是s1的副本</span></span><br><span class="line">    string s3=<span class="string">&quot;hiya&quot;</span>;  <span class="comment">//s3是该字符串字面值的副本</span></span><br><span class="line">    <span class="function">string <span class="title">s4</span><span class="params">(<span class="number">10</span>,<span class="string">&#x27;c&#x27;</span>)</span></span>;  <span class="comment">//s4的内容是 cccccccccc</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>string的读写</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1,s2;</span><br><span class="line">    cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">    cout&lt;&lt;s1&lt;&lt;s2&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>不能用printf直接输出string，需要写成：printf(“%s”, s.c_str())</strong></font><br><font color="Bluee"><strong>使用getline读取一整行</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="built_in">getline</span>(cin,s);</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>string的empty和size操作（注意size是无符号整数，因此 s.size() &lt;&#x3D; -1一定成立）</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1,s2=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    cout&lt;&lt;s1.<span class="built_in">empty</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;s2.<span class="built_in">empty</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;s2.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>string 的比较：支持 &gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D;&#x3D; !&#x3D;等所有比较操作，按字典序进行比较。<br>为string对象赋值：<br>string s1(10, ‘c’), s2;&#x2F;&#x2F; s1的内容是 cccccccccc;<br>                                   &#x2F;&#x2F;s2是一个空字符串<br>s1 &#x3D; s2;&#x2F;&#x2F; 赋值：用s2的副本替换s1的副本<br>                            &#x2F;&#x2F; 此时s1和s2都是空字符串<br>两个string对象相加：<br>string s1 &#x3D; “hello,  ”, s2 &#x3D; “world\n”;<br>string s3 &#x3D; s1 + s2;&#x2F;&#x2F; s3的内容是 hello, world\n<br>s1 +&#x3D; s2;        &#x2F;&#x2F; s1 &#x3D; s1 + s2<br>字面值和string对象相加：做加法运算时，字面值和字符都会被转化成string对象，因此直接相加就是将这些字面值串联起来：<br>string s1 &#x3D; “hello”, s2 &#x3D; “world”;&#x2F;&#x2F; 在s1和s2中都没有标点符号<br>string s3 &#x3D; s1 + “, “ + s2 + ‘\n’;<br>当把string对象和字符字面值及字符串字面值混在一条语句中使用时，必须确保每个加法运算符的两侧的运算对象至少有一个是string：<br>string s4 &#x3D; s1 + “, “;&#x2F;&#x2F; 正确：把一个string对象和有一个字面值相加<br>string s5 &#x3D; “hello” +”, “; &#x2F;&#x2F; 错误：两个运算对象都不是string<br>string s6 &#x3D; s1 + “, “ + “world”;  &#x2F;&#x2F; 正确，每个加法运算都有一个运算符是string<br>string s7 &#x3D; “hello” + “, “ + s2;  &#x2F;&#x2F; 错误：不能把字面值直接相加，运算是从左到右进行的。</p></blockquote><p><font color="Bluee"><strong>处理string对象中的字符,可以将string对象当成字符数组来处理</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s=<span class="string">&quot;hello word&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++) cout&lt;&lt;s[i]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>使用基于范围的for语句</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s=<span class="string">&quot;hello word&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c : s) cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> &amp;c : s) c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h2><blockquote><p>一个典型的函数定义包括以下部分：返回类型、函数名字、由0个或多个形参组成的列表以及函数体。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fact</span><span class="params">(<span class="type">int</span> val)</span>  <span class="comment">//求阶乘的程序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (val &gt; <span class="number">1</span>)</span><br><span class="line">        ret *= val -- ;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>函数名字是fact，它作用于一个整型参数，返回一个整型值。return语句负责结束fact并返回ret的值。</strong></font><br><font color="red"><strong>调用函数</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="built_in">fact</span>(<span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;5! is &quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="Bluee"><strong>函数的调用完成两项工作：一是用实参初始化函数对应的形参，二是将控制权转移给被调用函数。此时，主调函数的执行被暂时中断，被调函数开始执行。</strong></font><br><font color="red"><strong>形参和实参</strong></font></p><blockquote><p>实参是形参的初始值。第一个实参初始化第一个形参，第二个实参初始化第二个形参，依次类推。形参和实参的类型和个数必须匹配。<br>fact(“hello”);  &#x2F;&#x2F; 错误：实参类型不正确<br>fact(); &#x2F;&#x2F; 错误：实参数量不足<br>fact(42, 10, 0); &#x2F;&#x2F; 错误：实参数量过多<br>fact(3.14); &#x2F;&#x2F; 正确：该实参能转换成int类型，等价于fact(3);<br>形参也可以设置默认值，但所有默认值必须是最后几个。当传入的实参个数少于形参个数时，最后没有被传入值的形参会使用默认值。</p></blockquote><p><font color="red"><strong>函数的形参列表</strong></font></p><blockquote><p>函数的形参列表可以为空，但是不能省略。<br>void f1() {&#x2F;* …. <em>&#x2F;}&#x2F;&#x2F; 隐式地定义空形参列表<br>void f2(void) {&#x2F;</em> … <em>&#x2F;} &#x2F;&#x2F; 显式地定义空形参列表<br>形参列表中的形参通常用逗号隔开，其中每个形参都是含有一个声明符的声明。即使两个形参的类型一样，也必须把两个类型都写出来：<br>int f3(int v1, v2) {&#x2F;</em> … <em>&#x2F;} &#x2F;&#x2F; 错误<br>int f4(int v1, int v2) {&#x2F;</em> … *&#x2F;} &#x2F;&#x2F; 正确</p></blockquote><p><font color="red"><strong>函数返回类型</strong></font></p><blockquote><p>大多数类型都能用作函数的返回类型。一种特殊的返回类型是void，它表示函数不返回任何值。函数的返回类型不能是数组类型或函数类型，但可以是指向数组或者函数的指针。</p></blockquote><p><font color="red"><strong>局部变量、全局变量与静态变量</strong></font></p><blockquote><p>局部变量只可以在函数内部使用，全局变量可以在所有函数内使用。当局部变量与全局变量重名时，会优先使用局部变量。</p></blockquote><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><blockquote><p>传值参数:当初始化一个非引用类型的变量时，初始值被拷贝给变量。此时，对变量的改动不会影响初始值。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">f</span>(x);</span><br><span class="line">    cout&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>传引用参数:当函数的形参为引用类型时，对形参的修改会影响实参的值。使用引用的作用：避免拷贝、让函数返回额外信息。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">f</span>(x);</span><br><span class="line">    cout&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数组形参:在函数中对数组中的值的修改，会影响函数外面的数组。<br>一维数组形参的写法：<br>        &#x2F;&#x2F; 尽管形式不同，但这三个print函数是等价的<br>        void print(int <em>a) {&#x2F;</em> … <em>&#x2F;}<br>        void print(int a[]) {&#x2F;</em> … <em>&#x2F;}<br>        void print(int a[10]) {&#x2F;</em> … *&#x2F;}</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">print</span><span class="params">(<span class="type">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) cout&lt;&lt;a[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) a[i]=i;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>多维数组形参的写法：多维数组中，除了第一维之外，其余维度的大小必须指定<br>void print(int (<em>a)[10]) {&#x2F;</em> … <em>&#x2F;}<br>void print(int a[][10]) {&#x2F;</em> … *&#x2F;}</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">print</span><span class="params">(<span class="type">int</span> a[][<span class="number">10</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">            cout&lt;&lt;a[i][j]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">             a[i][j]=j;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>返回类型和return语句:return 语句终止当前正在执行的函数并将控制权返回到调用该函数的地方。return语句有两种形式：<br>return;<br>return expression;</p></blockquote><blockquote><p>无返回值函数:没有返回值的return语句只能用在返回类型是void的函数中。返回void的函数不要求非得有return语句，因为在这类函数的最后一句后面会隐式地执行return。通常情况下，void函数如果想在它的中间位置提前退出，可以使用return语句。return的这种用法有点类似于我们用break语句退出循环。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;v1,<span class="type">int</span> &amp;v2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果两个值相等，则不需要交换，直接退出</span></span><br><span class="line">    <span class="keyword">if</span> (v1 == v2)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 如果程序执行到了这里，说明还需要继续完成某些功能</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tmp = v2;</span><br><span class="line">    v2 = v1;</span><br><span class="line">    v1 = tmp;</span><br><span class="line">    <span class="comment">// 此处无须显示的return语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有返回值的函数:只要函数的返回类型不是void，则该函数内的每条return语句必须返回一个值。return语句返回值的类型必须与函数的返回类型相同，或者能隐式地转换函数的返回类型。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">max</span>(x,y)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>函数递归:在一个函数内部，也可以调用函数本身。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fact</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n*<span class="built_in">fact</span>(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">fact</span>(n)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类、结构体、指针、引用"><a href="#类、结构体、指针、引用" class="headerlink" title="类、结构体、指针、引用"></a>类、结构体、指针、引用</h1><h2 id="类与结构体"><a href="#类与结构体" class="headerlink" title="类与结构体"></a>类与结构体</h2><blockquote><p>类的定义：类中的变量和函数被统一称为类的成员变量。<br>private后面的内容是私有成员变量，在类的外部不能访问；public后面的内容是公有成员变量，在类的外部可以访问。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> age, height;</span><br><span class="line">    <span class="type">double</span> money;</span><br><span class="line">    string books[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">say</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;I&#x27;m &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">set_age</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_age</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add_money</span><span class="params">(<span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        money += x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; person_a, person_b, persons[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person c;</span><br><span class="line">    c.name = <span class="string">&quot;Edviv&quot;</span>;      <span class="comment">// 正确！访问公有变量</span></span><br><span class="line">    c.age = <span class="number">18</span>;          <span class="comment">// 错误！访问私有变量</span></span><br><span class="line">    c.<span class="built_in">set_age</span>(<span class="number">18</span>);       <span class="comment">// 正确！set_age()是共有成员变量</span></span><br><span class="line">    c.<span class="built_in">add_money</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    c.<span class="built_in">say</span>();</span><br><span class="line">    cout &lt;&lt; c.<span class="built_in">get_age</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>结构体和类的作用是一样的。不同点在于类默认是private，结构体默认是public。</strong></font></p><h2 id="指针和引用"><a href="#指针和引用" class="headerlink" title="指针和引用"></a>指针和引用</h2><p><font color="red"><strong>指针指向存放变量的值的地址。因此我们可以通过指针来修改变量的值</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> *p=&amp;a;</span><br><span class="line">    *p+=<span class="number">5</span>;</span><br><span class="line">    cout&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数组名是一种特殊的指针,指针可以做运算</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) cout&lt;&lt;*(a+i)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>引用和指针类似，相当于给变量起了个别名</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> &amp;p=a;</span><br><span class="line">    p+=<span class="number">5</span>;</span><br><span class="line">    cout&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>单链表</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10000</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125;*head;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Node *p=<span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">        p-&gt;val=i;</span><br><span class="line">        p-&gt;next=head;</span><br><span class="line">        head=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(Node *p=head;p;p=p-&gt;next) cout&lt;&lt;p-&gt;val&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p><font color="red"><strong>vector是变长数组，支持随机访问，不支持在任意位置 O(1) 插入。为了保证效率，元素的增删一般应该在末尾进行。</strong></font></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">声明:</span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span> 头文件</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a;相当于一个长度动态变化的<span class="type">int</span>数组</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; b[<span class="number">233</span>];相当于第一维长<span class="number">233</span>，第二位长度动态变化的<span class="type">int</span>数组</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">rec</span>&#123;…&#125;;</span><br><span class="line">    vector&lt;rec&gt; c;自定义的结构体类型也可以保存在vector中</span><br></pre></td></tr></table></figure><p><font color="red"><strong>size&#x2F;empty</strong></font></p><blockquote><p>size函数返回vector的实际长度（包含的元素个数），empty函数返回一个bool类型，表明vector是否为空。二者的时间复杂度都是 O(1)。<br>所有的STL容器都支持这两个方法，含义也相同，之后我们就不再重复给出。</p></blockquote><p><font color="red"><strong>clear</strong></font></p><blockquote><p>clear函数把vector清空。</p></blockquote><p><font color="red"><strong>迭代器</strong></font></p><pre><code>迭代器就像STL容器的“指针”，可以用星号“*”操作符解除引用。一个保存int的vector的迭代器声明方法:vector&lt;int&gt;::iterator it;vector的迭代器是“随机访问迭代器”，可以把vector的迭代器与一个整数相加减，其行为和指针的移动类似。可以把vector的两个迭代器相减，其结果也和指针相减类似，得到两个迭代器对应下标之间的距离。</code></pre><p><font color="red"><strong>begin&#x2F;end</strong></font></p><pre><code>begin函数返回指向vector中第一个元素的迭代器。例如a是一个非空的vector，则*a.begin()与a[0]的作用相同。所有的容器都可以视作一个“前闭后开”的结构，end函数返回vector的尾部，即第n个元素再往后的“边界”。*a.end()与a[n]都是越界访问，其中n=a.size()。下面两份代码都遍历了vector&lt;int&gt;a，并输出它的所有元素。for (int I = 0; I &lt; a.size(); I ++) cout &lt;&lt; a[i] &lt;&lt; endl;    for (vector&lt;int&gt;::iterator it = a.begin(); it != a.end(); it ++)         cout &lt;&lt; *it &lt;&lt; endl;</code></pre><p><font color="red"><strong>front&#x2F;back</strong></font></p><pre><code>front函数返回vector的第一个元素，等价于*a.begin() 和 a[0]。back函数返回vector的最后一个元素，等价于*==a.end() 和 a[a.size() – 1]。</code></pre><p><font color="red"><strong>push_back() 和 pop_back()</strong></font></p><pre><code>a.push_back(x) 把元素x插入到vector a的尾部。b.pop_back() 删除vector a的最后一个元素。</code></pre><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><pre><code>#include &lt;queue&gt;头文件queue主要包括循环队列queue和优先队列priority_queue两个容器。</code></pre><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">声明:</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">rec</span>&#123;…&#125;; queue&lt;rec&gt; q; <span class="comment">//结构体rec中必须定义小于号</span></span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt; q;<span class="comment">// 大根堆</span></span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; q;<span class="comment">// 小根堆</span></span><br><span class="line">    priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;q;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>循环队列 queue</strong></font></p><pre><code>push 从队尾插入pop 从队头弹出front 返回队头元素back 返回队尾元素</code></pre><p><font color="red"><strong>优先队列 priority_queue</strong></font></p><pre><code>push 把元素插入堆pop 删除堆顶元素top 查询堆顶元素（最大值）</code></pre><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><pre><code>#include &lt;stack&gt;头文件stack包含栈。声明和前面的容器类似。push 向栈顶插入pop 弹出栈顶元素</code></pre><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><pre><code>#include &lt;deque&gt;双端队列deque是一个支持在两端高效插入或删除元素的连续线性存储空间。它就像是vector和queue的结合。与vector相比，deque在头部增删元素仅需要O(1)的时间；与queue相比，deque像数组一样支持随机访问。[] 随机访问begin/end，返回deque的头/尾迭代器front/back 队头/队尾元素push_back 从队尾入队push_front 从队头入队pop_back 从队尾出队pop_front 从队头出队clear 清空队列</code></pre><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><pre><code>#include &lt;set&gt;头文件set主要包括set和multiset两个容器，分别是“有序集合”和“有序多重集合”，即前者的元素不能重复，而后者可以包含若干个相等的元素。set和multiset的内部实现是一棵红黑树，它们支持的函数基本相同。</code></pre><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">声明:</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">rec</span>&#123;…&#125;; set&lt;rec&gt; s;<span class="comment">// 结构体rec中必须定义小于号</span></span><br><span class="line">    multiset&lt;<span class="type">double</span>&gt; s;</span><br><span class="line"></span><br><span class="line">    size/empty/clear</span><br><span class="line">    与vector类似</span><br></pre></td></tr></table></figure><p><font color="red"><strong>迭代器</strong></font></p><pre><code>set和multiset的迭代器称为“双向访问迭代器”，不支持“随机访问”，支持星号(*)解除引用，仅支持”++”和--“两个与算术相关的操作。设it是一个迭代器，例如set&lt;int&gt;::iterator it;若把it++，则it会指向“下一个”元素。这里的“下一个”元素是指在元素从小到大排序的结果中，排在it下一名的元素。同理，若把it--，则it将会指向排在“上一个”的元素。</code></pre><p><font color="red"><strong>begin&#x2F;end</strong></font></p><pre><code>返回集合的首、尾迭代器，时间复杂度均为O(1)。s.begin() 是指向集合中最小元素的迭代器。s.end() 是指向集合中最大元素的下一个位置的迭代器。换言之，就像vector一样，是一个“前闭后开”的形式。因此--s.end()是指向集合中最大元素的迭代器。</code></pre><p><font color="red"><strong>insert</strong></font></p><pre><code>s.insert(x)把一个元素x插入到集合s中，时间复杂度为 O(logn)。在set中，若元素已存在，则不会重复插入该元素，对集合的状态无影响。</code></pre><p><font color="red"><strong>find</strong></font></p><pre><code>s.find(x) 在集合s中查找等于x的元素，并返回指向该元素的迭代器。若不存在，则返回s.end()。时间复杂度为 O(logn)。</code></pre><p><font color="red"><strong>lower_bound&#x2F;upper_bound</strong></font></p><pre><code>这两个函数的用法与find类似，但查找的条件略有不同，时间复杂度为 O(logn)。s.lower_bound(x) 查找大于等于x的元素中最小的一个，并返回指向该元素的迭代器。s.upper_bound(x) 查找大于x的元素中最小的一个，并返回指向该元素的迭代器。</code></pre><p><font color="red"><strong>erase</strong></font></p><pre><code>设it是一个迭代器，s.erase(it) 从s中删除迭代器it指向的元素，时间复杂度为O(logn)设x是一个元素，s.erase(x) 从s中删除所有等于x的元素，时间复杂度为O(k+logn)，其中k是被删除的元素个数。</code></pre><p><font color="red"><strong>count</strong></font></p><pre><code>s.count(x) 返回集合s中等于x的元素个数，时间复杂度为 O(k +logn)，其中k为元素x的个数。</code></pre><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><pre><code>#include &lt;map&gt;map容器是一个键值对key-value的映射，其内部实现是一棵以key为关键码的红黑树。Map的key和value可以是任意类型，其中key必须定义小于号运算符。</code></pre><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">声明:</span><br><span class="line">    map&lt;key_type, value_type&gt; name;</span><br><span class="line">    例如：</span><br><span class="line">    map&lt;<span class="type">long</span>, <span class="type">long</span>, <span class="type">bool</span>&gt; vis;</span><br><span class="line">    map&lt;string, <span class="type">int</span>&gt; hash;</span><br><span class="line">    map&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;<span class="type">int</span>&gt;&gt; test;</span><br><span class="line"></span><br><span class="line">size/empty/clear/begin/end均与set类似。</span><br><span class="line"></span><br><span class="line">    Insert/erase</span><br><span class="line">    与set类似，但其参数均是pair&lt;key_type, value_type&gt;。</span><br></pre></td></tr></table></figure><p><font color="red"><strong>find</strong></font></p><pre><code>h.find(x) 在变量名为h的map中查找key为x的二元组。</code></pre><p><font color="red">[]操作符:</font></p><pre><code>h[key] 返回key映射的value的引用，时间复杂度为O(logn)。[]操作符是map最吸引人的地方。我们可以很方便地通过h[key]来得到key对应的value，还可以对h[key]进行赋值操作，改变key对应的value。</code></pre><h1 id="位运算与常用库函数"><a href="#位运算与常用库函数" class="headerlink" title="位运算与常用库函数"></a>位运算与常用库函数</h1><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&amp; 与</span><br><span class="line">| 或</span><br><span class="line">~ 非</span><br><span class="line">^ 异或</span><br><span class="line">&gt;&gt; 右移</span><br><span class="line">&lt;&lt; 左移</span><br><span class="line"></span><br><span class="line">常用操作：</span><br><span class="line">(<span class="number">1</span>)求x的第k位数字  x &gt;&gt; k &amp; <span class="number">1</span></span><br><span class="line">(<span class="number">2</span>)<span class="built_in">lowbit</span>(x) = x &amp; -x，返回x的最后一位<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="常用库函数"><a href="#常用库函数" class="headerlink" title="常用库函数"></a>常用库函数</h2><p><font color="red"><strong>reverse 翻转</strong></font></p><pre><code>翻转一个vector：reverse(a.begin(), a.end());翻转一个数组，元素存放在下标1~n：reverse(a + 1, a + 1 + n);</code></pre><p><font color="red"><strong>unique 去重</strong></font></p><pre><code>返回去重之后的尾迭代器（或指针），仍然为前闭后开，即这个迭代器是去重之后末尾元素的下一个位置。该函数常用于离散化，利用迭代器（或指针）的减法，可计算出去重后的元素个数。把一个vector去重：int m =unique(a.begin(), a.end()) – a.begin();把一个数组去重，元素存放在下标1~n：int m = unique(a + 1, a + 1 + n) – (a + 1);</code></pre><p><font color="red"><strong>random_shuffle 随机打乱</strong></font></p><pre><code>用法与reverse相同</code></pre><p><font color="red"><strong>sort</strong></font></p><pre><code>对两个迭代器（或指针）指定的部分进行快速排序。可以在第三个参数传入定义大小比较的函数，或者重载“小于号”运算符。把一个int数组（元素存放在下标1~n）从大到小排序，传入比较函数：int a[MAX_SIZE];bool cmp(int a, int b) &#123;return a &gt; b; &#125;sort(a + 1, a + 1 + n, cmp);把自定义的结构体vector排序，重载“小于号”运算符：</code></pre><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">rec</span>&#123; <span class="type">int</span> id, x, y; &#125;</span><br><span class="line">vector&lt;rec&gt; a;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> rec &amp;a, <span class="type">const</span> rec &amp;b) &#123;</span><br><span class="line"><span class="keyword">return</span> a.x &lt; b.x || a.x == b.x &amp;&amp; a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><p><font color="red"><strong>lower_bound&#x2F;upper_bound  二分</strong></font></p><pre><code>lower_bound 的第三个参数传入一个元素x，在两个迭代器（指针）指定的部分上执行二分查找，返回指向第一个大于等于x的元素的位置的迭代器（指针）upper_bound 的用法和lower_bound大致相同，唯一的区别是查找第一个大于x的元素。当然，两个迭代器（指针）指定的部分应该是提前排好序的。在有序int数组（元素存放在下标1~n）中查找大于等于x的最小整数的下标：int I = lower_bound(a + 1, a + 1 + n,. x) – a;在有序vector&lt;int&gt; 中查找小于等于x的最大整数（假设一定存在）：int y = *--upper_bound(a.begin(), a.end(), x);</code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 本科课程 </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
